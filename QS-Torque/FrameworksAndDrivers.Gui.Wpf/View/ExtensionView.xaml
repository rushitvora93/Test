<UserControl x:Class="FrameworksAndDrivers.Gui.Wpf.View.ExtensionView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:syncfusion="http://schemas.syncfusion.com/wpf"
             xmlns:behaviors="clr-namespace:FrameworksAndDrivers.Gui.Wpf.View.Behaviors"
             xmlns:controls="clr-namespace:FrameworksAndDrivers.Gui.Wpf.View.Controls"
             xmlns:converter="clr-namespace:FrameworksAndDrivers.Gui.Wpf.View.Converter"
             xmlns:styles="clr-namespace:FrameworksAndDrivers.Gui.Wpf.View.Styles"
             xmlns:local="clr-namespace:FrameworksAndDrivers.Gui.Wpf.ViewModel"
             xmlns:wpf="clr-namespace:NGettext.Wpf;assembly=NGettext.Wpf"
             xmlns:view="clr-namespace:FrameworksAndDrivers.Gui.Wpf.View"
             xmlns:enums="clr-namespace:Common.Types.Enums;assembly=Common.Types"
             mc:Ignorable="d"
             d:DataContext="{d:DesignInstance local:ExtensionViewModel, IsDesignTimeCreatable=False}"
             d:DesignHeight="800"
             d:DesignWidth="1000">
    <i:Interaction.Triggers>
        <i:EventTrigger EventName="Loaded">
            <i:InvokeCommandAction Command="{Binding LoadedCommand}"></i:InvokeCommandAction>
        </i:EventTrigger>
    </i:Interaction.Triggers>
    <UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="Styles/TabStyles.xaml" />
                <ResourceDictionary Source="Styles/ButtonStyles.xaml" />
                <ResourceDictionary Source="Styles/ExpanderStyles.xaml" />
                <ResourceDictionary Source="Styles/TextBlockStyles.xaml" />
                <ResourceDictionary Source="Styles/TextBoxStyles.xaml" />
                <ResourceDictionary Source="Styles/SfDataGridStyles.xaml" />
                <ResourceDictionary Source="Styles/ListStyles.xaml" />
            </ResourceDictionary.MergedDictionaries>
            <BooleanToVisibilityConverter x:Key="BoolToVisibilityConverter"/>
            <converter:IsNotEqualConverter x:Key="IsNotEqualConverter" />
        </ResourceDictionary>
    </UserControl.Resources>

    <DockPanel>
        <TabControl DockPanel.Dock="Top"
                    Background="{DynamicResource ControlBackgroundBrush}"
                    Height="120">
            <TabItem Header="{wpf:Gettext Start}"
                     Height="30"
                     Padding="10,0">
                <StackPanel Orientation="Horizontal">
                    <Button Width="70"
                            Height="60"
                            Margin="10,5"
                            VerticalContentAlignment="Top"
                            Style="{DynamicResource TransparentButtonStyle}"
                            Command="{Binding AddExtensionCommand}">
                        <StackPanel>
                            <controls:ThemeImage Source="pack://application:,,,/Resources;component/Icons/add.png"
                                                 Height="30" 
                                                 Margin="0,0,0,2"/>
                            <TextBlock Text="{wpf:Gettext Add}"
                                       FontSize="10"
                                       TextAlignment="Center" 
                                       TextWrapping="WrapWithOverflow"/>
                        </StackPanel>
                    </Button>
                    <Button Width="70"
                            Height="60"
                            Margin="10,5"
                            VerticalContentAlignment="Top"
                            Style="{DynamicResource TransparentButtonStyle}"
                            Command="{Binding RemoveExtensionCommand}">
                        <StackPanel>
                            <controls:ThemeImage Source="pack://application:,,,/Resources;component/Icons/delete.png"
                                                 Height="30" 
                                                 Margin="0,0,0,2"/>
                            <TextBlock Text="{wpf:Gettext Remove}"
                                       FontSize="10"
                                       TextAlignment="Center" 
                                       TextWrapping="WrapWithOverflow"/>
                        </StackPanel>
                    </Button>
                    <Button Width="70"
                            Height="60"
                            Margin="10,5"
                            VerticalContentAlignment="Top"
                            Style="{DynamicResource TransparentButtonStyle}"
                            Command="{Binding SaveExtensionCommand}">
                        <StackPanel>
                            <controls:ThemeImage Source="pack://application:,,,/Resources;component/Icons/save.png"
                                                 Height="30" 
                                                 Margin="0,0,0,2"/>
                            <TextBlock Text="{wpf:Gettext Save}"
                                       FontSize="10"
                                       TextAlignment="Center" 
                                       TextWrapping="WrapWithOverflow"/>
                        </StackPanel>
                    </Button>

                    <Rectangle Width="1"
                               Fill="{DynamicResource SeperatedAreaBrush}"
                               Margin="0,5"
                               Visibility="{Binding Source={x:Static view:HideUnusedPartsUtil.UnusedFunctionVisibility}}"/>

                    <Button Width="70"
                            Height="60"
                            Margin="10,5"
                            VerticalContentAlignment="Top"
                            Style="{DynamicResource TransparentButtonStyle}"
                            Command="{Binding SaveExtensionCommand}"
                            Visibility="{Binding Source={x:Static view:HideUnusedPartsUtil.UnusedFunctionVisibility}}">
                        <StackPanel>
                            <controls:ThemeImage Source="pack://application:,,,/Resources;component/Icons/down-arrow.png"
                                                 Height="30" 
                                                 Margin="0,0,0,2"/>
                            <TextBlock Text="{wpf:Gettext ExtensionView Ribbon|Down}"
                                       FontSize="10"
                                       TextAlignment="Center" 
                                       TextWrapping="WrapWithOverflow"/>
                        </StackPanel>
                    </Button>

                    <Button Width="70"
                            Height="60"
                            Margin="10,5"
                            VerticalContentAlignment="Top"
                            Style="{DynamicResource TransparentButtonStyle}"
                            Command="{Binding SaveExtensionCommand}"
                            Visibility="{Binding Source={x:Static view:HideUnusedPartsUtil.UnusedFunctionVisibility}}">
                        <StackPanel>
                            <controls:ThemeImage Source="pack://application:,,,/Resources;component/Icons/up-arrow.png"
                                                 Height="30" 
                                                 Margin="0,0,0,2"/>
                            <TextBlock Text="{wpf:Gettext ExtensionView Ribbon|Up}"
                                       FontSize="10"
                                       TextAlignment="Center" 
                                       TextWrapping="WrapWithOverflow"/>
                        </StackPanel>
                    </Button>
                </StackPanel>
            </TabItem>

            <TabItem Header="{wpf:Gettext Print}"
                     Height="30"
                     Padding="10,0"
                     Visibility="{Binding Source={x:Static view:HideUnusedPartsUtil.UnusedFunctionVisibility}}">
                <StackPanel Orientation="Horizontal">
                    <Button Width="70"
                            Height="60"
                            Margin="10,5"
                            VerticalContentAlignment="Top"
                            Style="{DynamicResource TransparentButtonStyle}"
                            Command="{Binding PrintListCommand}">
                        <StackPanel>
                            <controls:ThemeImage Source="pack://application:,,,/Resources;component/Icons/printer.png"
                                                 Height="30" 
                                                 Margin="0,0,0,2"/>
                            <TextBlock Text="{wpf:Gettext Print List}"
                                       FontSize="10"
                                       TextAlignment="Center" 
                                       TextWrapping="WrapWithOverflow"/>
                        </StackPanel>
                    </Button>
                    <Button Width="70"
                            Height="60"
                            Margin="10,5"
                            VerticalContentAlignment="Top"
                            Style="{DynamicResource TransparentButtonStyle}"
                            Command="{Binding PrintListCommand}">
                        <StackPanel>
                            <controls:ThemeImage Source="pack://application:,,,/Resources;component/Icons/print-tree.png"
                                                 Height="30" 
                                                 Margin="0,0,0,2"/>
                            <TextBlock Text="{wpf:Gettext Print References}"
                                       FontSize="10"
                                       TextAlignment="Center" 
                                       TextWrapping="WrapWithOverflow"/>
                        </StackPanel>
                    </Button>
                </StackPanel>
            </TabItem>
        </TabControl>

        <DockPanel DockPanel.Dock="Left"
                   Width="250"
                   Margin="0,10,10,0">
            <ListBox DockPanel.Dock="Left"
                     ItemsSource="{Binding Extensions}"
                     SelectedItem="{Binding SelectedExtension, Delay=250}">
                <ListBox.ItemTemplate>
                    <DataTemplate>
                        <TextBlock Text="{Binding InventoryNumber}"
                                   Margin="0,2" />
                    </DataTemplate>
                </ListBox.ItemTemplate>
            </ListBox>
        </DockPanel>

        <Grid Margin="0 10 0 0">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
    
            <ScrollViewer Grid.Column="0"
                          VerticalScrollBarVisibility="Auto"
                          Visibility="{Binding IsListViewVisible, Converter={StaticResource BoolToVisibilityConverter}}">
                <DockPanel>
                    <Grid DockPanel.Dock="Top" IsEnabled="{Binding Path=SelectedExtension, Converter={StaticResource IsNotEqualConverter}, ConverterParameter={x:Null}}">
                        <Grid.Resources>
                            <Style x:Key="ExtendedTextBlockStyle"
                                   TargetType="TextBlock">
                                <Setter Property="TextAlignment"
                                        Value="Right" />
                                <Setter Property="Margin"
                                        Value="5" />
                                <Setter Property="VerticalAlignment"
                                        Value="Center" />
                            </Style>
                        </Grid.Resources>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <TextBlock Grid.Column="0"
                                   Grid.Row="0"
                                   Text="{wpf:Gettext Extension|Inventory Number}"
                                   styles:DynamicContainerStyle.BaseStyle="{DynamicResource {x:Type TextBlock}}"
                                   styles:DynamicContainerStyle.DerivedStyle="{DynamicResource ExtendedTextBlockStyle}" />
                        <TextBox Grid.Column="1"
                                 Grid.Row="0"
                                 Margin="7"
                                 HorizontalAlignment="Left"
                                 MaxLength="50"
                                 Text="{Binding Path=SelectedExtension.InventoryNumber, ValidatesOnDataErrors=True, UpdateSourceTrigger=PropertyChanged}"
                                 Width="400">
                            <styles:DynamicContainerStyle.DerivedStyle>
                                <Style TargetType="syncfusion:DoubleTextBox">
                                    <Style.Triggers>
                                        <Trigger Property="Validation.HasError" Value="true">
                                            <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors)/ErrorContent}" />
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </styles:DynamicContainerStyle.DerivedStyle>
                            <i:Interaction.Behaviors>
                                <behaviors:ShowChangedFromComparisonTextBoxBehavior CompareTo="{Binding SelectedExtensionWithoutChanges.InventoryNumber}"/>
                            </i:Interaction.Behaviors>
                        </TextBox>
                        <TextBlock Grid.Column="0"
                                   Grid.Row="1"
                                   Text="{wpf:Gettext Extension|Description}"
                                   Margin="0,10,0,0"
                                   VerticalAlignment="Top"
                                   styles:DynamicContainerStyle.BaseStyle="{DynamicResource {x:Type TextBlock}}"
                                   styles:DynamicContainerStyle.DerivedStyle="{DynamicResource ExtendedTextBlockStyle}" />
                        <TextBox Grid.Column="1"
                                 Grid.Row="1"
                                 Margin="7"
                                 HorizontalAlignment="Left"
                                 MaxLength="40"
                                 Text="{Binding Path=SelectedExtension.Description, ValidatesOnDataErrors=True, UpdateSourceTrigger=PropertyChanged}"
                                 Width="400">
                            <styles:DynamicContainerStyle.DerivedStyle>
                                <Style TargetType="syncfusion:DoubleTextBox">
                                    <Style.Triggers>
                                        <Trigger Property="Validation.HasError" Value="true">
                                            <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors)/ErrorContent}" />
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </styles:DynamicContainerStyle.DerivedStyle>
                            <i:Interaction.Behaviors>
                                <behaviors:ShowChangedFromComparisonTextBoxBehavior CompareTo="{Binding SelectedExtensionWithoutChanges.Description}"/>
                            </i:Interaction.Behaviors>
                        </TextBox>
                        <TextBlock Grid.Column="0"
                                   Grid.Row="2"
                                   Text="{wpf:Gettext Extension|Extension correction}"
                                   styles:DynamicContainerStyle.BaseStyle="{DynamicResource {x:Type TextBlock}}"
                                   styles:DynamicContainerStyle.DerivedStyle="{DynamicResource ExtendedTextBlockStyle}" />
                        <ComboBox Grid.Column="1"
                                          Grid.Row="2"
                                          Width="200"
                                          Margin="7"
                                          HorizontalAlignment="Left"
                                          SelectedItem="{Binding SelectedExtension.ExtensionCorrection}">
                            <ComboBox.ItemTemplate>
                                <DataTemplate>
                                    <TextBlock styles:DynamicContainerStyle.BaseStyle="{DynamicResource {x:Type TextBlock}}">
                                                <styles:DynamicContainerStyle.DerivedStyle>
                                                    <Style TargetType="TextBlock">
                                                        <Style.Triggers>
                                                            <DataTrigger Binding="{Binding}" Value="UseFactor">
                                                                <Setter Property="Text" Value="{wpf:Gettext LocationView|Factor}"/>
                                                            </DataTrigger>
                                                            <DataTrigger Binding="{Binding}" Value="UseGauge">
                                                                <Setter Property="Text" Value="{wpf:Gettext Extension correction|Gauge}"/>
                                                            </DataTrigger>
                                                        </Style.Triggers>
                                                    </Style>
                                                </styles:DynamicContainerStyle.DerivedStyle>
                                    </TextBlock>
                                </DataTemplate>
                            </ComboBox.ItemTemplate>
                            <enums:ExtensionCorrection>UseFactor</enums:ExtensionCorrection>
                            <enums:ExtensionCorrection>UseGauge</enums:ExtensionCorrection>
                        </ComboBox>
                        <TextBlock Grid.Column="0"
                                   Grid.Row="3"
                                   Visibility="{Binding SelectedExtension.IsGaugeVisible, Converter={StaticResource BoolToVisibilityConverter}}"
                                   Text="{wpf:Gettext Extension|Gauge}"
                                   styles:DynamicContainerStyle.BaseStyle="{DynamicResource {x:Type TextBlock}}"
                                   styles:DynamicContainerStyle.DerivedStyle="{DynamicResource ExtendedTextBlockStyle}" />
                        <StackPanel Grid.Column="1"
                                    Grid.Row="3"
                                    Visibility="{Binding SelectedExtension.IsGaugeVisible, Converter={StaticResource BoolToVisibilityConverter}}"
                                    Orientation="Horizontal"
                                    VerticalAlignment="Center">
                            <syncfusion:DoubleTextBox Width="70"
                                                      Value="{Binding SelectedExtension.Length, ValidatesOnDataErrors=True, UpdateSourceTrigger=PropertyChanged}"
                                                      Margin="7"
                                                      Cursor="IBeam"
                                                      styles:DynamicContainerStyle.BaseStyle="{DynamicResource {x:Type syncfusion:DoubleTextBox}}">
                                <styles:DynamicContainerStyle.DerivedStyle>
                                    <Style TargetType="syncfusion:DoubleTextBox">
                                        <Style.Triggers>
                                            <Trigger Property="Validation.HasError" Value="true">
                                                <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors)/ErrorContent}" />
                                            </Trigger>
                                        </Style.Triggers>
                                    </Style>
                                </styles:DynamicContainerStyle.DerivedStyle>
                                <i:Interaction.Behaviors>
                                    <behaviors:ShowChangedFromComparisonDoubleTextBoxBehavior ClearShownChangesParent="{Binding}"  CompareTo="{Binding SelectedExtensionWithoutChanges.Length}"/>
                                </i:Interaction.Behaviors>
                            </syncfusion:DoubleTextBox>
                            <TextBlock Text="{wpf:Gettext Unit|mm}"
                                                       VerticalAlignment="Center" />
                            <controls:ThemeImage 
                                                Source="pack://application:,,,/Resources;component/Icons/information_2.png"
                                                Width="20"
                                                Height="20"
                                                HorizontalAlignment="Left"
                                                ToolTip="{wpf:Gettext Extension|GaugeToolTip}"
                                                Opacity="0.5"
                                                Margin="10,0,0,0"
                                                ToolTipService.ShowOnDisabled="True"/>
                        </StackPanel>

                        <TextBlock Grid.Column="0"
                                   Grid.Row="4"
                                   Visibility="{Binding SelectedExtension.IsFactorVisible, Converter={StaticResource BoolToVisibilityConverter}}"
                                   Text="{wpf:Gettext Extension|Factor Torque}"
                                   styles:DynamicContainerStyle.BaseStyle="{DynamicResource {x:Type TextBlock}}"
                                   styles:DynamicContainerStyle.DerivedStyle="{DynamicResource ExtendedTextBlockStyle}" />
                        <StackPanel Grid.Column="1"
                                    Grid.Row="4"
                                    Visibility="{Binding SelectedExtension.IsFactorVisible, Converter={StaticResource BoolToVisibilityConverter}}"
                                    Orientation="Horizontal"
                                    VerticalAlignment="Center">
                            <syncfusion:DoubleTextBox Width="70" 
                                                      Value="{Binding SelectedExtension.FactorTorque, ValidatesOnDataErrors=True, UpdateSourceTrigger=PropertyChanged}"
                                                      Margin="7" 
                                                      Cursor="IBeam"
                                                      styles:DynamicContainerStyle.BaseStyle="{DynamicResource {x:Type syncfusion:DoubleTextBox}}">
                                <styles:DynamicContainerStyle.DerivedStyle>
                                    <Style TargetType="syncfusion:DoubleTextBox">
                                        <Style.Triggers>
                                            <Trigger Property="Validation.HasError" Value="true">
                                                <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors)/ErrorContent}" />
                                            </Trigger>
                                        </Style.Triggers>
                                    </Style>
                                </styles:DynamicContainerStyle.DerivedStyle>
                                <i:Interaction.Behaviors>
                                    <behaviors:ShowChangedFromComparisonDoubleTextBoxBehavior ClearShownChangesParent="{Binding}"  CompareTo="{Binding SelectedExtensionWithoutChanges.FactorTorque}"/>
                                </i:Interaction.Behaviors>
                            </syncfusion:DoubleTextBox>
                            <controls:ThemeImage 
                                                Source="pack://application:,,,/Resources;component/Icons/information_2.png"
                                                Width="20"
                                                Height="20"
                                                HorizontalAlignment="Left"
                                                ToolTip="{wpf:Gettext Extension|FactorTorqueToolTip}"
                                                Opacity="0.5"
                                                Margin="10,0,0,0"
                                                ToolTipService.ShowOnDisabled="True"/>
                        </StackPanel>
                        <TextBlock Grid.Column="0"
                                   Grid.Row="5"
                                   Text="{wpf:Gettext Extension|Bending compensation}"
                                   styles:DynamicContainerStyle.BaseStyle="{DynamicResource {x:Type TextBlock}}"
                                   styles:DynamicContainerStyle.DerivedStyle="{DynamicResource ExtendedTextBlockStyle}" />
                        <StackPanel Grid.Column="1"
                                    Grid.Row="5"
                                    Orientation="Horizontal"
                                    VerticalAlignment="Center">
                            <syncfusion:DoubleTextBox Width="70" 
                                                      Value="{Binding SelectedExtension.Bending, ValidatesOnDataErrors=True, UpdateSourceTrigger=PropertyChanged}"
                                                      Margin="7" 
                                                      Cursor="IBeam"
                                                      styles:DynamicContainerStyle.BaseStyle="{DynamicResource {x:Type syncfusion:DoubleTextBox}}">
                                <styles:DynamicContainerStyle.DerivedStyle>
                                    <Style TargetType="syncfusion:DoubleTextBox">
                                        <Style.Triggers>
                                            <Trigger Property="Validation.HasError" Value="true">
                                                <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors)/ErrorContent}" />
                                            </Trigger>
                                        </Style.Triggers>
                                    </Style>
                                </styles:DynamicContainerStyle.DerivedStyle>
                                <i:Interaction.Behaviors>
                                    <behaviors:ShowChangedFromComparisonDoubleTextBoxBehavior ClearShownChangesParent="{Binding}"  CompareTo="{Binding SelectedExtensionWithoutChanges.Bending}"/>
                                </i:Interaction.Behaviors>
                            </syncfusion:DoubleTextBox>
                            <TextBlock Text="{wpf:Gettext Unit|°/100 Nm}"
                                                       VerticalAlignment="Center" />
                            <controls:ThemeImage 
                                                Source="pack://application:,,,/Resources;component/Icons/information_2.png"
                                                Width="20"
                                                Height="20"
                                                HorizontalAlignment="Left"
                                                ToolTip="{wpf:Gettext Extension|BendingToolTip}"
                                                Opacity="0.5"
                                                Margin="10,0,0,0"
                                                ToolTipService.ShowOnDisabled="True"/>
                        </StackPanel>
                    </Grid>
                   
                    <Expander DockPanel.Dock="Top"
                              VerticalAlignment="Top"
                              Margin="10 20 0 20"
                              Width="400"
                              MaxHeight="300"
                              HorizontalAlignment="Left"
                              IsExpanded="{Binding AreLocationReferencesShown}">
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="Expanded">
                                <i:InvokeCommandAction Command="{Binding LoadReferencedLocationsCommand}"/>
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                        <Expander.Header>
                            <Grid Margin="5">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition />
                                </Grid.ColumnDefinitions>

                                <controls:ThemeImage Grid.Column="0"
                                                     Source="pack://application:,,,/Resources;component/Icons/link.png"
                                                     Width="20"
                                                     Height="20" />
                                <TextBlock Grid.Column="1"
                                           Text="{wpf:Gettext ExtensionView|Referenced locations}"
                                           VerticalAlignment="Center"
                                           Margin="20,0"/>
                            </Grid>
                        </Expander.Header>

                        <ListBox ScrollViewer.VerticalScrollBarVisibility="Auto"
                                 ItemsSource="{Binding ReferencedLocations}"
                                 styles:DynamicContainerStyle.BaseStyle="{DynamicResource {x:Type ListBox}}">
                            <styles:DynamicContainerStyle.DerivedStyle>
                                <Style TargetType="ListBox">
                                    <Setter Property="Visibility" Value="Visible"/>

                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding ReferencedLocations.Count}" Value="0">
                                            <Setter Property="Visibility" Value="Collapsed"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </styles:DynamicContainerStyle.DerivedStyle>

                            <ListBox.ItemTemplate>
                                <DataTemplate>
                                    <TextBlock>
                                        <Run Text="{Binding DisplayName}"/>
                                    </TextBlock>
                                </DataTemplate>
                            </ListBox.ItemTemplate>
                        </ListBox>
                    </Expander>     
                </DockPanel>
            </ScrollViewer>
      <!--
            <controls:ExtendedSfDataGrid Grid.Column="0" x:Name="DataGrid"
                                         ItemsSource="{Binding SelectedExtensionListCollectionView}"
                                         AutoGenerateColumns="False"
                                         AllowFiltering="True"
                                         AllowResizingColumns="True"
                                         Columns="{Binding ListViewColumns}"
                                         ColumnSizer="Auto"
                                         Visibility="{Binding IsListViewVisible, Converter={StaticResource BooleanToVisibilityConverter}}"
                                         FilterPopupStyle="{StaticResource GridFilterStyle}"/>
            -->
        </Grid>
    </DockPanel>
</UserControl>

<UserControl x:Class="FrameworksAndDrivers.Gui.Wpf.View.Controls.SwitchButton"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:FrameworksAndDrivers.Gui.Wpf.View.Controls"
             mc:Ignorable="d" 
             d:DesignHeight="30" d:DesignWidth="250">

    <Border CornerRadius="5"
            BorderThickness="1"
            BorderBrush="{DynamicResource QstBlueBrush}">
        <UniformGrid Columns="2">
            <ToggleButton x:Name="LeftButton"
                          Command="{Binding LeftButtonCommand, RelativeSource={RelativeSource AncestorType={x:Type local:SwitchButton}, Mode=FindAncestor}}"
                          IsChecked="{Binding IsLeftChecked, Mode=TwoWay, RelativeSource={RelativeSource AncestorType={x:Type local:SwitchButton}, Mode=FindAncestor}}"
                          Content="{Binding LeftText, RelativeSource={RelativeSource AncestorType={x:Type local:SwitchButton}, Mode=FindAncestor}}">
                <ToggleButton.Template>
                    <ControlTemplate TargetType="{x:Type ButtonBase}">
                        <Border x:Name="border" CornerRadius="5,0,0,5" BorderThickness="0" Background="White" SnapsToDevicePixels="True">
                            <ContentPresenter x:Name="contentPresenter" RenderTransformOrigin="0.5, 0.5"  ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                <ContentPresenter.RenderTransform>
                                    <ScaleTransform x:Name="TransparentButtonScaleTransform" ScaleX="1.0" ScaleY="1.0"/>
                                </ContentPresenter.RenderTransform>
                            </ContentPresenter>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="Button.IsDefaulted" Value="True">
                                <Setter Property="Background" TargetName="border" Value="White"/>
                                <Setter Property="ToggleButton.Foreground" TargetName="border" Value="{DynamicResource QstBlueBrush}"/>
                            </Trigger>
                            <Trigger Property="ToggleButton.IsChecked" Value="True">
                                <Setter Property="Background" TargetName="border" Value="{DynamicResource QstBlueBrush}"/>
                                <Setter Property="ToggleButton.Foreground" TargetName="border" Value="White"/>
                            </Trigger>

                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background">
                                    <Setter.Value>
                                        <SolidColorBrush Color="Black" Opacity="0.15"/>
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </ToggleButton.Template>
            </ToggleButton>

            <ToggleButton x:Name="RightButton"
                          BorderThickness="1"
                          BorderBrush="{DynamicResource QstBlueBrush}"
                          Command="{Binding RightButtonCommand, RelativeSource={RelativeSource AncestorType={x:Type local:SwitchButton}, Mode=FindAncestor}}"
                          IsChecked="{Binding IsRightChecked, Mode=TwoWay, RelativeSource={RelativeSource AncestorType={x:Type local:SwitchButton}, Mode=FindAncestor}}"
                          Content="{Binding RightText, RelativeSource={RelativeSource AncestorType={x:Type local:SwitchButton}, Mode=FindAncestor}}">
                <ToggleButton.Template>
                    <ControlTemplate TargetType="{x:Type ButtonBase}">
                        <Border x:Name="border" CornerRadius="0,5,5,0" BorderThickness="0" Background="White" SnapsToDevicePixels="True">
                            <ContentPresenter x:Name="contentPresenter" RenderTransformOrigin="0.5, 0.5"  ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                <ContentPresenter.RenderTransform>
                                    <ScaleTransform x:Name="TransparentButtonScaleTransform" ScaleX="1.0" ScaleY="1.0"/>
                                </ContentPresenter.RenderTransform>
                            </ContentPresenter>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="Button.IsDefaulted" Value="True">
                                <Setter Property="Background" TargetName="border" Value="White"/>
                                <Setter Property="ToggleButton.Foreground" TargetName="border" Value="{DynamicResource QstBlueBrush}"/>
                            </Trigger>
                            <Trigger Property="ToggleButton.IsChecked" Value="True">
                                <Setter Property="Background" TargetName="border" Value="{DynamicResource QstBlueBrush}"/>
                                <Setter Property="ToggleButton.Foreground" TargetName="border" Value="White"/>
                            </Trigger>

                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background">
                                    <Setter.Value>
                                        <SolidColorBrush Color="Black" Opacity="0.15"/>
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </ToggleButton.Template>
            </ToggleButton>
        </UniformGrid>
    </Border>
</UserControl>

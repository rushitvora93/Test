<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

using System.Reflection;
using T4Mapper;

namespace FrameworksAndDrivers.NetworkView.T4Mapper
{
	public class Mapper
	{
		private readonly Assigner _assigner = new Assigner();


	<#

var parser = new MappigDefinitionParser();

var mappingFilePath = this.Host.ResolvePath("Mappings");
DirectoryInfo dir = new DirectoryInfo(mappingFilePath);
foreach (var file in dir.GetFiles("*.txt"))
{
	Write("\t\t// " + file.Name + "\r\n");
	string contents = File.ReadAllText(file.FullName);
	var ast = parser.Parse(contents);

	var from = ast.subnodes[0].action;
	var to = ast.subnodes[1].action;
	var hasDefaultConstructor = false;
	var propertyList = new List<Tuple<string, string>>();
	var constructorList = new List<Tuple<ConstructorParamType, string>>();

	var options = ast.subnodes.FirstOrDefault(item => item.action == "Options");
	if(options != null)
	{
		foreach(var option in options.subnodes)
		{
			Write("\t\t\t// " + option.action + "\r\n");

			if(option.action == "hasDefaultConstructor")
			{
				hasDefaultConstructor = true;
			}
		}
	}

	var properties = ast.subnodes.FirstOrDefault(item => item.action == "Properties");
	if(properties!= null)
	{
		foreach(var property in properties.subnodes)
		{
			Write("\t\t\t// PropertyMapping: " + property.action + " -> " + property.subnodes[0].action + "\r\n");

			propertyList.Add(Tuple.Create(property.action, property.subnodes[0].action));
		}
	}

	var construction = ast.subnodes.FirstOrDefault(item => item.action == "Constructor");
	if(construction != null)
	{
		foreach(var constructorParameter in construction.subnodes)
		{
			Write("\t\t\t// ConstructorMapping: " + constructorParameter.subnodes[0].action + "\r\n");

			ConstructorParamType paramType = ConstructorParamType.Undefined;
			switch(constructorParameter.action)
			{
				case "Property": paramType = ConstructorParamType.Property; break;
				case "Value": paramType = ConstructorParamType.Value; break;
			}

			constructorList.Add(Tuple.Create(paramType, constructorParameter.subnodes[0].action));
		}
	}

	if(propertyList != null && propertyList.Count != 0 && hasDefaultConstructor)
	{
		Write("\t\tpublic " + to + " DirectPropertyMapping(" + from + " source)\r\n");
		Write("\t\t{\r\n");
		Write("\t\t\tvar target = new " + to + "();\r\n");
		foreach(var mapping in propertyList)
		{
			Write("\t\t\t_assigner.Assign((value) => {target." + mapping.Item2 + " = value;}, source." + mapping.Item1 + ");\r\n");
		}
		Write("\t\t\treturn target;\r\n");
		Write("\t\t}\r\n\r\n");
	}

	if(propertyList != null && propertyList.Count != 0)
	{
		Write("\t\tpublic void DirectPropertyMapping(" + from + " source, " + to + " target)\r\n");
		Write("\t\t{\r\n");
		foreach(var mapping in propertyList)
		{
			Write("\t\t\t_assigner.Assign((value) => {target." + mapping.Item2 + " = value;}, source." + mapping.Item1 + ");\r\n");
		}
		Write("\t\t}\r\n\r\n");
	}

	if(propertyList != null && propertyList.Count != 0 && hasDefaultConstructor)
	{
		Write("\t\tpublic " + to + " ReflectedPropertyMapping(" + from + " source)\r\n");
		Write("\t\t{\r\n");
		Write("\t\t\tvar target = new " + to + "();\r\n");
		foreach(var mapping in propertyList)
		{
			Write("\t\t\ttypeof(" + to + ").GetField(\"" + mapping.Item2 + "\", BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance).SetValue(target, source." + mapping.Item1 + ");\r\n");
		}
		Write("\t\t\treturn target;\r\n");
		Write("\t\t}\r\n\r\n");
	}

	if(propertyList != null && propertyList.Count != 0)
	{
		Write("\t\tpublic void ReflectedPropertyMapping(" + from + " source, " + to + " target)\r\n");
		Write("\t\t{\r\n");
		foreach(var mapping in propertyList)
		{
			Write("\t\t\ttypeof(" + to + ").GetField(\"" + mapping.Item2 + "\", BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance).SetValue(target, source." + mapping.Item1 + ");\r\n");
		}
		Write("\t\t}\r\n\r\n");
	}

	if(constructorList != null && constructorList.Count != 0)
	{
		Write("\t\tpublic " + to + " DirectConstructorMapping(" + from + " source)\r\n");
		Write("\t\t{\r\n");
		Write("\t\t\treturn new " + to + "(");
		for(int i = 0; i < constructorList.Count; ++i)
		{
			if(i != 0)
			{
				Write(", ");
			}
			if(constructorList[i].Item1 == ConstructorParamType.Property)
			{
				Write("source." + constructorList[i].Item2);
			}
			if(constructorList[i].Item1 == ConstructorParamType.Value)
			{
				Write(constructorList[i].Item2);
			}
		}
		Write(");\r\n");
		Write("\t\t}\r\n\r\n");
	}
}

#>
	}
}

<#@ include file="$(SolutionDir)T4Mapper\T4MapperLogic.tt.cs" #>

<#+
enum ConstructorParamType
{
	Undefined,
	Property,
	Value
};
#>
